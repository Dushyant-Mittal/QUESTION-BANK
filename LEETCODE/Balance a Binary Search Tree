 Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

 class Solution {
public:
    vector<TreeNode*> arr;
    TreeNode* balanceBST(TreeNode* root) {
        inorder(root);
        return sortedArrayToBST(0, arr.size() - 1);
    }
    void inorder(TreeNode* root) {
        if(root==NULL){
            return;
        }
        inorder(root->left);
        arr.push_back(root);
        inorder(root->right);
    }
    TreeNode* sortedArrayToBST(int start, int end) {
        if(start>end){
            return NULL;
        }
        int mid=(start+end)/2;
        TreeNode* root=arr[mid];
        root->left=sortedArrayToBST(start, mid-1);
        root->right=sortedArrayToBST(mid+1, end);
        return root;
    }
};
