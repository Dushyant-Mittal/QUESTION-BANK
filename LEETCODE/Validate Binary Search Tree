Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

class Solution {
public:
    void inorder(TreeNode* root, vector <int> &nodes){
        if(!root){
            return;
        }
        inorder(root -> left, nodes);
        nodes.push_back(root -> val);    
        inorder(root -> right, nodes); 
    }
    bool isValidBST(TreeNode* root) {
        if(!root){
            return true;
        }
        vector <int> nodes;
        inorder(root, nodes); 
        set <int> s(nodes.begin(), nodes.end());
        if(s.size() != nodes.size()){
            return false;
        }
        for(int i=0; i<nodes.size()-1; i++){
            if(nodes[i]>nodes[i+1]){
                return false;
            }
        }       
        return true;
    }
};
