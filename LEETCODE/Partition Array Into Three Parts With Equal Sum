Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

 class Solution{
public:
    bool canThreePartsEqualSum(vector<int>& arr){
        int sum=0;
        for(int i=0;i<arr.size();i++){
            sum+=arr[i];
        }
        if(sum%3!=0){
            return false;
        }
        sum/=3;
        int x=0;
        int count=3;
        for(int i=0;i<arr.size();i++){
            x+=arr[i];
            if(x==sum){
                count--; 
                x=0;
            }
            if(count==0){
                return true;
            }
        }
        return false;
    }
};
