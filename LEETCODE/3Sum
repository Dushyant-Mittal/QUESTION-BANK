Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> s;
        int n=nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>>ans;
        for(int i=0; i<n; i++){
            int left=i+1;
            int right=n-1;
            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];
                if(sum==0){
                    s.insert({nums[i], nums[left], nums[right]});
                    ++left;
                    --right;
                }
                else if(sum>0){
                    --right;
                }
                else{
                    ++left;
                }
            }
        }
        for(auto allTriplets : s){
            ans.push_back(allTriplets);
        }
        return ans;
    }
};
