Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

class Solution {
public:
    int length(ListNode* head){
        ListNode* temp=head;
        int l=0;
        while(temp!=NULL){
            l++;
            temp=temp->next;
        }
        return l;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL){
            return head;
        }
        if(head->next==NULL){
            return head;
        }
        ListNode* prev=NULL;
        ListNode* curr=head;
        ListNode* nextnode= curr->next;
        int pos=0;
        int l=length(head);
        if(l<k){
            return head;
        }
        while(pos<k){
            nextnode =curr->next;
            curr->next=prev;
            prev=curr;
            curr=nextnode;
            pos++;
        }
        ListNode*rec=NULL;
        if(nextnode!=NULL){
            rec= reverseKGroup(nextnode,k);
            head->next=rec;
        }
        return prev;
    }
};
